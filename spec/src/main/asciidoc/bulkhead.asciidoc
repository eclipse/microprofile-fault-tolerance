//
// Copyright (c) 2017 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Contributors:
// Emily Jiang

[[bulkhead]]
== Bulkhead
The `Bulkhead` pattern is to prevent faults in one part of the system from cascading to the entire system, which might bring down the whole system. The implementation is to limit the number of concurrent requests accessing to an instance.

=== Bulkhead Usage
A method or class can be annotated with `@Bulkhead`, which means the method or the methods under the class will have Bulkhead policy applied correspondingly. There are two different approaches to the bulkhead: thread pool isolation and semaphore isolation. When `Bulkhead` used together with `Asynchronous`, the thread pool isolation approach is in use. If `Bulkhead` is used without `Asynchronous`, it means the semaphore approach. The thread pool approach allows to configure the maximum concurrent requests together with the waiting queue size, while the semaphore approach only allows the concurrent number of requests configuration.
* Semaphore style Bulkhead
The code-snippet below means the method serviceA applies the `Bulkhead` policy, 
which is semaphore approach, limiting the maximum concurrent requests to 5.
[source, java]
----
@Bulkhead(5) // maximum 5 concurrent requests allowed
public Connection serviceA() {
   Connection conn = null;
   counterForInvokingServiceA++;
   conn = connectionService();
   return conn;
}
----


* Thread pool style Bulkhead
The above code-snippet means the method serviceA applies the `Bulkhead` policy, 
which is thread pool approach, limiting the maximum concurrent requests to 5 and the waiting queue size to 8.

[source, java]
----
// maximum 5 concurrent requests allowed, maximum 8 requests allowed in the waiting queue
@Asynchronous
@Bulkhead(value = 5, waitingThreadQueue = 8) 
public Future<Connection> serviceA() {
   Connection conn = null;
   counterForInvokingServiceA++;
   conn = connectionService();
   return CompletableFuture.completedFuture(conn);
}
----


In the semaphore approach, on reaching maximum request counter, the extra request will fail with `BulkheadException`. In the thread pool approach, when a request cannot be added to the waiting queue, `BulkheadException` will be thrown.
The `Bulkhead` annotation can be used together with `Fallback`, `CircuitBreaker`, `Asynchronous`, `Timeout` and `Retry`. A `Fallback` can be specified, so that it can be invoked if the `BulkheadException` is thrown. 
